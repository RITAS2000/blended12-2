{"version":3,"file":"index.js","sources":["../src/js/refs.js","../src/js/markup-tasks.js","../src/js/render-tasks.js","../src/main.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('.header-form'),\n  ul: document.querySelector('.tasks-list'),\n};\n","export function createMarkupItem(newTask) {\r\n  return `<li class=\"task-list-item\" data-id=\"${newTask.id}\">\r\n      <button class=\"task-list-item-btn\">Delete</button>\r\n      <h3>${newTask.taskName}</h3>\r\n      <p>${newTask.taskDescription}</p>\r\n  </li>`\r\n}\r\n \r\nexport function createMarkupList(tasks) { \r\n  return tasks.map(createMarkupItem).join(\"\")\r\n}","import { refs } from './refs.js';\r\nimport { createMarkupList } from './markup-tasks.js';\r\n\r\nexport function renderTask(tasks) {\r\n  refs.ul.innerHTML = '';\r\n  refs.ul.insertAdjacentHTML('beforeend', createMarkupList(tasks));\r\n}\r\n","/*\n  Створи список справ.\n  На сторінці є два інпути які має вводиться назва і текст задачі.\n  Після натискання на кнопку \"Add\" завдання додається до списку #task-list.\n\n  У кожної картки має бути кнопка \"Delete\", щоб можна було\n  прибрати завдання зі списку.\n  Список із завданнями має бути доступним після перезавантаження сторінки.\n\n  Розмітка картки задачі\n  <li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>Заголовок</h3>\n      <p>Текст</p>\n  </li>\n*/\nimport { refs } from './js/refs.js';\nimport { nanoid } from 'nanoid';\nimport { renderTask } from './js/render-tasks.js';\n\nconst TASK_LIST = 'taskList';\nconst tasks = JSON.parse(localStorage.getItem(TASK_LIST)) ?? [];\nrenderTask(tasks);\n\nrefs.form.addEventListener('submit', event => {\n  event.preventDefault();\n  const taskName = event.target.elements.taskName.value.trim();\n  const taskDescription = event.target.elements.taskDescription.value.trim();\n\n  const newTask = {\n    taskName,\n    taskDescription,\n    id: nanoid(),\n  };\n\n  tasks.push(newTask);\n\n  localStorage.setItem(TASK_LIST, JSON.stringify(tasks));\n\n  renderTask(tasks);\n  refs.form.reset();\n});\n"],"names":["refs","createMarkupItem","newTask","createMarkupList","tasks","renderTask","TASK_LIST","event","taskName","taskDescription","nanoid"],"mappings":"svBAAO,MAAMA,EAAO,CAClB,KAAM,SAAS,cAAc,cAAc,EAC3C,GAAI,SAAS,cAAc,aAAa,CAC1C,ECHO,SAASC,EAAiBC,EAAS,CACxC,MAAO,uCAAuCA,EAAQ,EAAE;AAAA;AAAA,YAE9CA,EAAQ,QAAQ;AAAA,WACjBA,EAAQ,eAAe;AAAA,QAElC,CAEO,SAASC,EAAiBC,EAAO,CACtC,OAAOA,EAAM,IAAIH,CAAgB,EAAE,KAAK,EAAE,CAC5C,CCPO,SAASI,EAAWD,EAAO,CAChCJ,EAAK,GAAG,UAAY,GACpBA,EAAK,GAAG,mBAAmB,YAAaG,EAAiBC,CAAK,CAAC,CACjE,CCcA,MAAME,EAAY,WACZF,EAAQ,KAAK,MAAM,aAAa,QAAQE,CAAS,CAAC,GAAK,GAC7DD,EAAWD,CAAK,EAEhBJ,EAAK,KAAK,iBAAiB,SAAUO,GAAS,CAC5CA,EAAM,eAAc,EACpB,MAAMC,EAAWD,EAAM,OAAO,SAAS,SAAS,MAAM,OAChDE,EAAkBF,EAAM,OAAO,SAAS,gBAAgB,MAAM,OAE9DL,EAAU,CACd,SAAAM,EACA,gBAAAC,EACA,GAAIC,EAAQ,CAChB,EAEEN,EAAM,KAAKF,CAAO,EAElB,aAAa,QAAQI,EAAW,KAAK,UAAUF,CAAK,CAAC,EAErDC,EAAWD,CAAK,EAChBJ,EAAK,KAAK,OACZ,CAAC"}